|	.module test
|	.pseg
|	main:		;Implementacao do algoritmo selection sort aplicado a um array
0000:  0xc000	|	        lcl r0,LOWBYTE ARR1
0001:  0xc400	|	        lch r0,HIGHBYTE ARR1
0002:  0xa280	|	        load r4,r0	;r4 tem o numero de elementos que constituem o array
0003:  0xa004	|	        add r4,r0,r4	;r4 tem o endereco final,aponta para a ultima posicao do array a ordenar
0004:  0x80c0	|	        inca r0,r0	;r0 aponta para o primeiro elemento do array a ordenar
0005:  0x8d40	|	        passa r1,r0	;r1	"	"	"		"	"	"
0006:  0x9280	|	        load r2,r0	;r2 contem primeiro elemento do array
0007:  0x88c8	|	LOOP:   inca r1,r1	;
0008:  0x9a88	|	        load r3,r1	;
0009:  0xb153	|	        sub r6,r2,r3	;r6 nao e utilizado apenas interessa o resultado presente à saida da ALU para as flags
000a:  0x0409	|	        jf.neg TROCA	;r2>r3 faz troca de posicao no array
|	CONT:
000b:  0xb161	|	        sub r6,r4,r1	;r6 nao e utilizado ...
000c:  0x05fa	|	        jf.zero LOOP	;r4>r1 o array ainda nao foi todo percorrido continua o loop
000d:  0xb160	|	        sub r6,r4,r0	;
000e:  0xb1b0	|	        deca r6,r6	;necessario para detectar se ja esta na penultima posicao do array na posicao final,nao sendo necessario prosseguir o teste
000f:  0x150a	|	        jt.zero FIM	;r4=r0 array ja esta todo ordenado pode terminar
0010:  0x80c0	|	        inca r0,r0	;actualiza ponteiro para o elemento a ser testado
0011:  0x9280	|	        load r2,r0	;le elemento seguinte do array 
0012:  0x8d40	|	        passa r1,r0	;r1 passa a apontar para a posicao onde vai ser colocado o elemento ordenado
0013:  0x2ff3	|	        j LOOP
|	TROCA:
0014:  0x82c3	|	        store r0,r3	;Troca a posicao dos elementos na memoria 
0015:  0x82ca	|	        store r1,r2	;
0016:  0xad50	|	        passa r5,r2	;r5 serve apenas como registo temporario
0017:  0x9558	|	        passa r2,r3	;troca o conteudo dos registos, pois r2 tem o elemento a colocar na posicao final
0018:  0x9d68	|	        passa r3,r5	;e r3 tem o elemento que vai ser testado se e menor q o elemento que se encontra na posicao final
0019:  0x2ff1	|	        j CONT		;conjtinua a ordenacao
001a:  0x2fff	|	FIM: j FIM
|	.dseg
|	ARR1:
0000:  0x000f	|	        .word   15
0001:  0x000a	|	        .word   10
0002:  0x0006	|	        .word   6
0003:  0x000c	|	        .word   12
0004:  0xfffd	|	        .word   -3
0005:  0x0008	|	        .word   8
0006:  0x0007	|	        .word   7
0007:  0x000b	|	        .word   11
0008:  0x0001	|	        .word   1
0009:  0x0004	|	        .word   4
000a:  0x0009	|	        .word   9
000b:  0x0002	|	        .word   2
000c:  0x0005	|	        .word   5
000d:  0x000d	|		.word   13
000e:  0x000f	|		.word   15
000f:  0x000e	|		.word   14
|	STACK:
|	.end

		 G L O B A L   R E F E R E N C E S
    Name      RefIn   Type  DclrSeg  Rslved  segAddr   Value
  ==========|=======|======|=======|=======|========|========
main          	pseg	1	0	yes	0	0
ARR1          	pseg	48	3	yes	0	0
ARR1          	pseg	80	3	yes	1	0
LOOP          	pseg	1	0	yes	7	7
TROCA         	pseg	16	0	yes	a	14
CONT          	pseg	1	0	yes	b	b
LOOP          	pseg	1	0	yes	c	7
FIM           	pseg	16	0	yes	f	1a
LOOP          	pseg	1	0	yes	13	7
TROCA         	pseg	1	0	yes	14	14
CONT          	pseg	1	0	yes	19	b
FIM           	pseg	1	0	yes	1a	1a
FIM           	pseg	1	0	yes	1a	1a
ARR1          	dseg	1	3	yes	0	0
STACK         	dseg	1	3	yes	10	10
